** 조건문 **

1. 제어문
        프로그램의 흐름을 개발자가 원하는 방식으로 조정하기 위해 사용하는 구문이다.
        (1) 조건문 : if , else if, else, switch
        (2) 반복문(기본) : for ,  while , do... while
        (3) 제어문 : break. continue


2. 조건문
        조건의 참(True) 또는 거짓(False)에 따라 코드의 실행 흐름을 제어하는데 사용된다.
        (1) if : 조건이 참일 때 실행되는 코드 / 주로 범위줄 때(ex. 점수)
        (2) else : 조건이 거짓일 때 실행되는 코드
        (3) else if : 복수(참&거짓) 조건일 때
        (4) switch : 여러 값 중 하나를 선택할 경우
                        (= 값이 하나이고 경우가 여러개일 때 유용)


3. 기본 반복문
        (1) for : (초기식, 조건식, 증감식)을 포함하여 *반복횟수가 명확*할 경우
        (2) while : 조건이 참인 동안 계속 반복된다.(반복횟수 정해져있지않음)
        (3) do...while : 최소 한번은 실행된 후 조건을 검사, 적어도 한 번 실행보장

        => 배열이나 객체와 무관하게, 반복적으로 어떤 작업을 수행할 때 사용된다.
                (= 평이한 반복문)


** 배열 **

1. 배열
        여러 개의 값을 하나의 변수에 순서대로 저장할 수 있는 자료구조, [ ] 대괄호 사용
        - method : push, pop, shift, unshift, splice , forEach, map 

2. 배열을 이용한 반복문
        (1) for .. of : index가 필요없을 때
        (2) forEach : 함수형 스타일로 배열 반복

3. 2D 배열 : 2차원 행렬(matrix)

** 함수 **
function (입력값){
        return 결과값
}

# 호이스팅 : 코드를 실행하기 전에 변수와 함수 선언을 "끌어올리는" 동작을 말한다.
                즉, 함수선언과 함수 호출은 순서가중요하지 않다.

** 프로그램 패러다임
 프로그래밍을 바라보는 방식 또는 문제를 해결하기 위한 사고 방식이다. 즉, 어떻게 프로그램을 구성하고 동작하게 할 것인가에 대한 철학 또는 스타일이다.

 1. 절차 지향 프로그래밍을
        코드를 순서대로 실행되는 일련의 절차로 구성하는 방식(단, 언어 != 패러다임)

 2. 객체 지행 프로그래밍(OOP)
        현실 세계의 사물들을 객체로 모델링하여, 객체간의 상호작용을 통해 문제를 해결하는 방식
        긱 객체는 속성(데이터)과 행동(메서드)을 가지며, 객체들을 재사용하고 확장하며 협력하게 함으로써 코드의 재사용성, 유지보수성, 확장성을 높인다. 

        1. 객체 리터럴(object literal) : 중괄호{}안에 직접 속성과 메서드를 정의

        2. new Object(): 빈 메모리에 object 함수를 통해서 객체를 만듦
                - new : 힙 메모리에 뒤의 객체를 올리는
                - Object :  모든 객체의 최상위 부모(프로토타입의 기반)

        3. 생성자 함수 : new 키워드와 함께 사용, 객체를 여러개 찍어낼 수 있음

        4. 클래스(Class,ES6)

        5. Object.create()
        : Object.create로 객체를 생성하게 되면 힙 공간에 또 다른 object 공간이 생긴다. 따라서 생성된 객체는 새로운 공간에 저장되며 계속해서 추가되는 정보도 그곳에 저장된다.

 3. 함수형 프로그래밍 
        함수 자체를 중심에 두는 프로그래밍 패러다임으로, 데이터를 변경하지 않고(불변성), 순수함수를 조합하여 문제를 해결


4. class(설계도) 문법 요소
 1. constructor() : 객체가 생성될 떄 자동으로 호출되는 초기화 함수
 2. instant
 3. this.keyword : 셍성된 객체 자신을 가리킨다.
 4. 클래스 상속(extends) : 다른 클래스의 속성과 메서드를 물려받을 수 있음
 5. super() : 부모 클래스 constructor 호출
 6. 정적 메서드(static) : 클래스 이름으로 직접 호출 (객체로 호출 X)
 7. 클래스 필드(속성) 정의
 8. get과 set : get과 set 키워드를 사용해서 객체 속성에 접근하거나 값을 설정할 때 특별한 동작을 지정할 수 있다. 이를 통해 속성처럼 보이지만, 실제로는 함수처럼 작동하는 코드를 만들 수 있음.
        - get과 set은 같은 이름을 공유해야함.
9. private : 클래스 내부에서만 접근 가능한 비공개 속성이다. 외부에서 직접 접근&수정 불가


*** 프로토 타입

객체가 다른 객체로부터 속성과 메서드를 상속받을 수 있게 해주는 메커니즘이다.
모든 객체는 숨겨진 링크인(__proto__ / [[Prototype]])을 통해 자신의 부모 역할을 하는 객체를 참조하여, 이를 통해 객체 간에 속성과 메서드를 공유할 수 있다.

*** object 객체
프로토랑 뭐가 다름? 모든객체에 적용?이 차이점? 프로토보다 더 넓은 개념?

